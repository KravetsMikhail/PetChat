===============================
Описание архитектуры системы
===============================

Система будет базироваться на микросервисной архитектуре, так как это упростит горизонтальное масштабирование и разделение сервисов.

Для работы с клиентами необходимо применить паттерн BFF (Backend-for-Frontend).

Каждый сервис будет владеть своей собственной моделью данных.

Протокол обмена сообщениями - Websocket

Основные сервисы системы
~~~~~~~~~~~~~~~~~~~~~~~~~~

- Websocket сервис 

В обязанности каждого из этих серверов входит предоставление порта каждому онлайн-пользователю.

- API-шлюз (API Gateway)

API-шлюзы под каждый тип клиента. Позволяет инкапсулировать внутреннюю архитектуру чата, а так же осуществляет дополнительные функции. 

- Websocket менеджер

Менеджер WebSocket отвечает за поддержание соответствия между активным пользователем и назначенным ему портом.

- Служба сообщений (Message service)

Служба сообщений - это хранилище сообщений поверх кластера баз данных. Она действует как интерфейс к базе данных для других служб, взаимодействующих с базами данных. 
Отвечает за хранение и извлечение сообщений из базы данных. Также удаляет сообщения из базы данных через заданный промежуток времени. 
Предоставляет API для получения сообщений с помощью различных фильтров, таких как идентификатор пользователя, идентификатор сообщения и так далее.

- Служба оповещений (Notification service)

Отвечает за отправку push-уведомлений.

- Служба статусов (Statuses service)

Отслеживает статус посещения пользователей. 

- Мультимедиа сервис (Asset service)

Сервис отвечает за отправку и получение медиафайлов. 

- Сервис профилей пользователей (User service)

Отвечает за управление пользователями системы.


Контекстная диаграмма системы
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. uml:: petchatContext.puml
    :scale: 100 %
    :align: center
