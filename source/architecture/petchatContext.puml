@startuml test

!include <C4/C4_Container>
' !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!define MATERIAL https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/material

!$ICONURL = "https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/v3.0.0/icons"
!include $ICONURL/common.puml
!include $ICONURL/devicons2/apachekafka_original_wordmark.puml

!include MATERIAL/vpn_key.puml
!include MATERIAL/insert_drive_file.puml
!include FONTAWESOME/users.puml
!include FONTAWESOME/braille.puml
!include DEVICONS/redis.puml
!include DEVICONS/postgresql.puml
!include MATERIAL/notifications_active.puml

LAYOUT_WITH_LEGEND()

Person(user, "Пользователи", "", $sprite="users")
Container(loadbalanser1, "Балансировщик", "Балансировщик нагрузки", "", $sprite="braille")

System_Boundary(geoloc, "Геораспределенная инфраструктура") {    
    Container(ws, "WebScoket сервер", "Поддерживает соединение с активными (онлайн) пользователями", "")
    ' ContainerDb(wscash, "Redis", "", "", $sprite="redis")
    
}

Container(loadbalanser2, "Балансировщик", "Балансировщик нагрузки", "", $sprite="braille")

System_Boundary(chat, "Инфраструктура мессенджера") {
    Container(apigate1, "API Gateway", "BFF", "API-Шлюзы")
    Container(wsmanager, "WebSocket manager", "", "Управление содинениями")
    ' ContainerDb(wsmanagerdb, "Redis кластер", "", "", $sprite="redis")
    Container(message, "Message service", "", "Служба сообщений")
    ' ContainerQueue(kafka, "Брокер сообщений", "", "", $sprite="apachekafka_original_wordmark")
    ' ContainerDb(colddb, "Холодное хранение сообщений", "", "", $sprite="postgresql")
    ' ContainerDb(hotdb, "Горячее хранение сообщений", "", "", $sprite="redis")
    Container(notification, "Notification service", "", "Служба оповещений")
    Container(status, "Status service", "", "Служба статусов")
    Container(profileuser, "User service", "", "Сервис профилей")
    Container(asset, "Asset service", "", "Мультимедиа сервис")
    ' Container(blob, "BLOB service", "SeaweedFS", "Мультимедиа сервис")
    ' ContainerQueue(kafka2, "Брокер сообщений", "", "", $sprite="apachekafka_original_wordmark")
    ' ContainerDb(notificationDb, "Кеш Redis", "", "", $sprite="redis")
    ' ContainerDb(statusDb, "PostgreSQL", "Кластер БД", "", $sprite="postgresql")
    ' ContainerDb(usersDb, "PostgreSQL", "Кластер БД", "", $sprite="postgresql")
}

Container_Ext(auth, "Сервер аутентификации", "SSO", $sprite = "vpn_key")
Container_Ext(cdn, "CDN", "", $sprite = "insert_drive_file")
Container_Ext(blob, "BLOB service", "SeaweedFS", "Мультимедиа сервис")
Container_Ext(push, "Push-notification sevices", "GCM, APNS", $sprite = "notifications_active")

Rel(user, loadbalanser1, "", "")
BiRel(loadbalanser1, ws, "", "")
BiRel(apigate1, wsmanager, "", "")
BiRel(ws, loadbalanser2, "", "")
BiRel(loadbalanser2, apigate1, "", "")
Rel(auth, apigate1, "", "")
BiRel(apigate1, message, "", "")
BiRel_U(notification, apigate1, "", "")
BiRel_U(status, apigate1, "", "")
BiRel_U(profileuser, apigate1, "", "")
BiRel_U(asset, apigate1, "", "")
BiRel_L(asset, cdn, "", "")
BiRel(asset, blob, "", "")
BiRel(user, auth, "", "")
Rel(notification, push, "", "")

' Rel(notification, kafka2, "", "")
' BiRel_D(kafka2, notificationDb, "", "")
' Rel(status, statusDb, "", "")
' Rel(profileuser, usersDb, "", "")
' Rel(message, kafka, "", "")
' BiRel(kafka, colddb, "", "")
' BiRel(kafka, hotdb, "", "")
' Rel_U(chat, push, "", "")
' Rel_L(ws, wscash, "", "")
' BiRel(wsmanager, wsmanagerdb, "", "")


@endumlP