@startuml sequence

== Инициализация подключения ==

"Клиент 1"-> "Инфраструктура Мессенджера": Подключение
activate "Инфраструктура Мессенджера"
activate "Клиент 1"
"Инфраструктура Мессенджера" --> "Клиент 1": Подключено (WebSocket)
"Инфраструктура Мессенджера" -> "Клиент 1": Загрузка новых сообщений (REST API)
deactivate "Клиент 1"

activate "Клиент 2"
"Клиент 2" -> "Инфраструктура Мессенджера": Подключение
"Инфраструктура Мессенджера" --> "Клиент 2": Подключено (WebSocket)
"Инфраструктура Мессенджера" -> "Клиент 2": Загрузка новых сообщений (REST API)
deactivate "Клиент 2"

== Обмен сообщениями (клиенты on-line) ==

"Клиент 1"-> "Инфраструктура Мессенджера": Сообещение Клиенту 2
activate "Клиент 1"

"Инфраструктура Мессенджера" --> "Клиент 1": Доставлено на сервер

"Инфраструктура Мессенджера" -> "Клиент 2": Сообщение от Клиента 1
activate "Клиент 2"

"Клиент 2" --> "Инфраструктура Мессенджера": Подтверждение

"Инфраструктура Мессенджера" -> "Клиент 1": Доставлено Пользователю 2

"Клиент 2" -> "Инфраструктура Мессенджера": Сообщение прочитано
deactivate "Клиент 2"

"Инфраструктура Мессенджера" -> "Клиент 1": Прочитано Пользователем 2

== Обмен сообщениями (один клиент off-line) ==

"Клиент 1"-> "Инфраструктура Мессенджера": Сообещение Клиенту 2
activate "Клиент 1"

"Инфраструктура Мессенджера" --> "Клиент 1": Доставлено на сервер

"Инфраструктура Мессенджера" -> "Инфраструктура Мессенджера": Сохранение в БД


@enduml
